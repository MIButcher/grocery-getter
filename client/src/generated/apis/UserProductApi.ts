/* tslint:disable */
/* eslint-disable */
/**
 * GroceryGetter
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UserProduct,
} from '../models/index';
import {
    UserProductFromJSON,
    UserProductToJSON,
} from '../models/index';

export interface ApiUserProductsPostRequest {
    userProduct?: UserProduct;
}

export interface GetUserProductByIdRequest {
    userProductId: number;
}

export interface GetUserProductByProductIdRequest {
    productId: number;
}

export interface GetUserProductsByUserIdRequest {
    userId: number;
}

/**
 * 
 */
export class UserProductApi extends runtime.BaseAPI {

    /**
     */
    async apiUserProductsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/userProducts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserProductsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserProductsGetRaw(initOverrides);
    }

    /**
     */
    async apiUserProductsPostRaw(requestParameters: ApiUserProductsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/userProducts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserProductToJSON(requestParameters['userProduct']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserProductsPost(requestParameters: ApiUserProductsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserProductsPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getUserProductByIdRaw(requestParameters: GetUserProductByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userProductId'] == null) {
            throw new runtime.RequiredError(
                'userProductId',
                'Required parameter "userProductId" was null or undefined when calling getUserProductById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/userProducts/{userProductId}`.replace(`{${"userProductId"}}`, encodeURIComponent(String(requestParameters['userProductId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getUserProductById(requestParameters: GetUserProductByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getUserProductByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getUserProductByProductIdRaw(requestParameters: GetUserProductByProductIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling getUserProductByProductId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/userProducts/userProduct/{productId}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getUserProductByProductId(requestParameters: GetUserProductByProductIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getUserProductByProductIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getUserProductsByUserIdRaw(requestParameters: GetUserProductsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserProductsByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/userProducts/userProducts/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getUserProductsByUserId(requestParameters: GetUserProductsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getUserProductsByUserIdRaw(requestParameters, initOverrides);
    }

}
