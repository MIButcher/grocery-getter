/* tslint:disable */
/* eslint-disable */
/**
 * GroceryGetter
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Aisle,
} from '../models/index';
import {
    AisleFromJSON,
    AisleToJSON,
} from '../models/index';

export interface GetAisleByIdRequest {
    aisleId: number;
}

export interface GetAisleByLayoutIdRequest {
    layoutId: number;
}

export interface SaveAisleRequest {
    aisle?: Aisle;
}

/**
 * 
 */
export class AisleApi extends runtime.BaseAPI {

    /**
     */
    async getAisleByIdRaw(requestParameters: GetAisleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Aisle>> {
        if (requestParameters['aisleId'] == null) {
            throw new runtime.RequiredError(
                'aisleId',
                'Required parameter "aisleId" was null or undefined when calling getAisleById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/aisles/{aisleId}`;
        urlPath = urlPath.replace(`{${"aisleId"}}`, encodeURIComponent(String(requestParameters['aisleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AisleFromJSON(jsonValue));
    }

    /**
     */
    async getAisleById(requestParameters: GetAisleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Aisle> {
        const response = await this.getAisleByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAisleByLayoutIdRaw(requestParameters: GetAisleByLayoutIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Aisle>>> {
        if (requestParameters['layoutId'] == null) {
            throw new runtime.RequiredError(
                'layoutId',
                'Required parameter "layoutId" was null or undefined when calling getAisleByLayoutId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/aisles/{layoutId}`;
        urlPath = urlPath.replace(`{${"layoutId"}}`, encodeURIComponent(String(requestParameters['layoutId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AisleFromJSON));
    }

    /**
     */
    async getAisleByLayoutId(requestParameters: GetAisleByLayoutIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Aisle>> {
        const response = await this.getAisleByLayoutIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAislesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Aisle>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/aisles`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AisleFromJSON));
    }

    /**
     */
    async getAisles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Aisle>> {
        const response = await this.getAislesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async saveAisleRaw(requestParameters: SaveAisleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Aisle>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/aisles`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AisleToJSON(requestParameters['aisle']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AisleFromJSON(jsonValue));
    }

    /**
     */
    async saveAisle(requestParameters: SaveAisleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Aisle> {
        const response = await this.saveAisleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
